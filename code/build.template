<?xml version="1.0" encoding="GBK"?>
<project name="build-template" basedir=".">
    <description>
        <![CDATA[
          自动化脚本模板。（作者：龙昌茂）
            提供任务:
                1、clean         清理。依赖compile.clean,jar.clean,jar.output.clean
                2、compile       编译
                3、build         打包。依赖jar,confuse,jar.output
                4、all           先清理(clean)，在打jar包(build)，然后再打发布包(product.package)
            依赖属性（必须在import这个文件之前定义）：
                1、module.name              模块名
                2、module.src.dir           源文件目录
                3、module.build.dir         编译结果目录
                4、module.dest.dir          打包输出目录
                5、module.jar.name          jar包的名字
                6、lib.dir                  依赖的jar所在目录
                7、module.resource.dir      定义资源文件目录。如果指定了该属性，则会将该目录下的资源文件全部copy到编译后目录进行打包
                8、version                  版本

            可自定义的属性：
                1、jar.output.dir           打包后输出的目录
                2、need_confuse             是否对jar包进行加扰。默认不加扰。如果需要加扰则定义该属性即可 
                3、copyright                版权信息
                4、tool.proguard.name       加扰工具包完整文件名
                5、COMPILE_JAVA_HOME        编译时使用的jdk目录
            可自定义的钩子任务（必须在import这个文件之后定义）：
                1、compile.before           编译前钩子任务
                2、compile.after            编译后钩子任务（将源文件目录下的非JAVA文件copy到编译后结果目录不在此列）
                3、jar.before               打包前钩子任务
                4、jar.after                打包后钩子任务
                5、product.package          产品打包（不是打jar包）
                
            可自定义的文件集合（必须在import这个文件之后定义）：
                1、compile.patternset.id    编译时的文件集合
                2、jar.patternset.id        打包时的文件集合
                3、copy.resource.id         编译后需要copy的资源文件集合
        ]]>
    </description>
    <!--时间戳 -->
    <tstamp>
        <format property="NOW" pattern="yyyy-MM-dd HH:mm:ss"/>
        <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <property environment="env"/>

    <property name="need_confuse"               value="true" />
    <property name="debug"                      value="true" />
    <property name="java.encoding"              value="utf-8" />
    <property name="lib.dir"                    value="${basedir}/../lib" />
    <property name="tool.proguard.name"         value="${lib.dir}/deploy/proguard.jar" />
    <property name="jar.output.dir"             value="${lib.dir}/modules"/>
    <property name="module.jar.confuse.name"    value="${module.name}.unconfuse.jar"/>
    <property name="copyright"                  value="@ 2010-${YEAR} tomstools.org. All rights reserved."/>
    <condition property="JAVA_HOME"     value="${COMPILE_JAVA_HOME}" else="${env.JAVA_HOME}">
        <isset property="COMPILE_JAVA_HOME"/>
    </condition>
    <!--======================== [public] =============================-->
    <target name="all" depends="clean,build,product.package"/>
    <target name="build" depends="jar,confuse,jar.output"/>
    
    <!-- 清理 -->
    <target name="clean" depends="compile.clean,jar.clean,jar.output.clean" />    
    
    <!-- 编译 -->
    <target name="compile">
        <echo message="JAVA_HOME=${JAVA_HOME}"/>
        <mkdir dir="${module.build.dir}"/>
        <!-- 编译前钩子任务 -->
        <antcall target="compile.before"/>
        
        <!-- 执行编译任务 -->
        <antcall target="compile.execute"/>
        
        <!-- 将源目录中的文件拷贝到编译后目录中 -->
        <antcall target="copy.resource.to.builddir"/>
        
        <!-- 编译后钩子任务 -->
        <antcall target="compile.after"/>
    </target>
    
    <!-- 打包 -->
    <target name="jar"  depends="compile">
        <mkdir dir="${module.dest.dir}"/>
        <!-- 打包前钩子任务 -->
        <antcall target="jar.before"/>
        
        <!-- 执行打包任务 -->
        <antcall target="jar.execute"/>
        
        <!-- 打包前钩子任务 -->
        <antcall target="jar.after"/>        
    </target>
    
    <!-- 将jar包输出到指定目录 -->
    <target name="jar.output">
        <copy file="${module.dest.dir}/${module.jar.name}" tofile="${jar.output.dir}/${module.jar.name}"/>
    </target>
    <!--======================== [private] =============================-->
    <!-- 清理编译结果 -->
    <target name="compile.clean">
        <delete dir="${module.build.dir}"/>
    </target>
    
    <!-- 清理打包结果 -->
    <target name="jar.clean">
        <delete dir="${module.dest.dir}"/>
    </target>
    
    <!-- 清理打包输出结果 -->
    <target name="jar.output.clean">
        <delete file="${jar.output.dir}/${module.jar.name}"/>
    </target>
    
    <!-- 执行编译 -->
    <target name="compile.execute">
        <javac srcdir="${module.src.dir}" destdir="${module.build.dir}" debug="${debug}" fork="true" encoding="${java.encoding}" executable="${JAVA_HOME}/bin/javac">
            <patternset refid="compile.patternset.id"/>
            <classpath refid="lib.classpath"/>
        </javac>
    </target>
    
    <!-- 执行打包 -->
    <target name="jar.execute">
        <jar basedir="${module.build.dir}" destfile="${module.dest.dir}/${module.jar.name}">
            <patternset refid="jar.patternset.id"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="${module.name}">
                    <attribute name="Version" value="${version}"/>
                    <attribute name="Copyright" value="${copyright}"/>
                    <attribute name="Build-Time" value="${NOW}"/>
                </section>

              </manifest>
        </jar>
    </target>
    
    <!-- 将源目录中的文件拷贝到编译后目录中 -->
    <target name="copy.resource.to.builddir" if="module.resource.dir">
        <echo message="将源目录中的文件拷贝到编译后目录中，默认拷贝所有非JAVA文件，如需更改，请重定义patternset：copy.resource.id"/>
        <!-- 将java文件以外的其他文件都copy到编译结果目录，以便打包 -->
        <copy todir="${module.build.dir}">
            <fileset dir="${module.resource.dir}">
                <patternset refid="copy.resource.id"/>
            </fileset>
        </copy>
    </target>
    
    <!-- classpath -->
    <path id="lib.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>    
    
    <!-- 加扰 -->
    <target name="confuse" if="need_confuse">
        <taskdef resource="proguard/ant/task.properties"
               classpath="${tool.proguard.name}" />

        <proguard printseeds="on" shrink="false" optimize="false" ignorewarnings="true">
            <!-- Specify the input jars, output jars, and library jars. -->            
            <injar  file="${module.dest.dir}/${module.jar.name}"/>
            <outjar file="${module.dest.dir}/${module.jar.confuse.name}" />
            
            <libraryjar file="${JAVA_HOME}/jre/lib/rt.jar" />
            <libraryjar file="${lib.dir}" />
            
            <!-- Preserve all public applications. -->            
            <!--keepclasseswithmembers access="public">
              <method access    ="public static"
                      type      ="void"
                      name      ="main"
                      parameters="java.lang.String[]" />
            </keepclasseswithmembers-->
            
            <!-- Preserve all annotations. -->            
            <keepattribute name="*Annotation*" />
            
            <!-- Preserve all native method names and the names of their classes. -->            
            <keepclasseswithmembernames>
              <method access="native" />
            </keepclasseswithmembernames>
            
            <!-- Preserve the methods that are required in all enumeration classes. -->            
            <keepclassmembers extends="java.lang.Enum">
              <method access="public static"
                      type="**[]"
                      name="values"
                      parameters="" />
              <method access="public static"
                      type="**"
                      name="valueOf"
                      parameters="java.lang.String" />
            </keepclassmembers>
            
            <!-- Explicitly preserve all serialization members. The Serializable
                 interface is only a marker interface, so it wouldn't save them.
                 You can comment this out if your library doesn't use serialization.
                 If your code contains serializable classes that have to be backward
                 compatible, please refer to the manual. -->            
            <keepclassmembers implements="java.io.Serializable">
              <field  access    ="static final"
                      type      ="long"
                      name      ="serialVersionUID" />
              <field  access    ="static final"
                      type      ="java.io.ObjectStreamField[]"
                      name      ="serialPersistentFields" />
              <method access    ="private"
                      type      ="void"
                      name      ="writeObject"
                      parameters="java.io.ObjectOutputStream" />
              <method access    ="private"
                      type      ="void"
                      name      ="readObject"
                      parameters="java.io.ObjectInputStream" />
              <method type      ="java.lang.Object"
                      name      ="writeReplace"
                      parameters="" />
              <method type      ="java.lang.Object"
                      name      ="readResolve"
                      parameters="" />
            </keepclassmembers>
            
            <!-- Your application may contain more items that need to be preserved;
                 typically classes that are dynamically created using Class.forName -->
            <!-- Keep all public servlets. -->
            <keep access="public" implements="javax.servlet.Servlet" />
            <!-- Keep all public filter. -->
            <keep access="public" implements="javax.servlet.Filter" />

            <!-- =================================== 样例 ============================ -->
            <keep type="interface" name="org.tomstools.A"/>
            <keep type="class" implements="org.tomstools.B"/>

            <keep type="class" name="**">
                <method access="public"/>
            </keep>            
        </proguard>
        
        <delete file="${module.dest.dir}/${module.jar.name}"/>
        <move file="${module.dest.dir}/${module.jar.confuse.name}" tofile="${module.dest.dir}/${module.jar.name}"/>
    </target>
    
    <!--======================== [protected] =============================-->
    <!-- 编译时的文件集合 -->
    <patternset id="compile.patternset.id">
        <include name="**/*"/>
    </patternset>
    
    <!-- 打包时的文件集合 -->
    <patternset id="jar.patternset.id">
        <include name="**/*"/>
    </patternset>
    
    <!-- 编译后需要copy的资源文件集合 -->
    <patternset id="copy.resource.id">
        <exclude name="**/*.java"/>
        <exclude name="**/*.xml"/>
    </patternset>
    
    <!-- 钩子任务：编译前 -->
    <target name="compile.before">
    </target>
    
    <!-- 钩子任务：编译后 -->
    <target name="compile.after">
    </target>
    
    <!-- 钩子任务：打包前 -->
    <target name="jar.before">
    </target>
    
    <!-- 钩子任务：打包后 -->
    <target name="jar.after">
    </target>
    
    <!-- 打包 -->
    <target name="product.package">
    </target>
</project>