<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
				http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
				 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/application.properties" />
	<!-- 开启aop处理 -->
	<aop:aspectj-autoproxy />

	<!-- 获取bean工具注入 -->
	<bean id="springContextHolder" class="com.ailk.ctc.rtbmsys.common.utils.SpringContextHolder" lazy-init="false"/>
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。-->  
	<context:component-scan base-package="com.ailk.ctc.rtbmsys">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

		
	<!-- 配置 Annotation 驱动，定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- Production 环境 -->
	
 	   
	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- 连接信息 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池参数配置信息 -->
		<property name="initialSize" value="5" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="20" />
		<property name="maxWait" value="200" />
		<property name="defaultAutoCommit" value="false" />
	</bean>

    <!-- *************在系统中统一采用Mybatis作为数据持久层处理框架*********** -->
		<!-- mybatis 配置事务管理器配置,单数据源事务 -->
	    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	        <property name="dataSource" ref="dataSource" />
	    </bean>
	    
		 <!-- 配置定义Mybatis SessionFactory对象 -->
	    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	        <property name="dataSource" ref="dataSource" />
	    </bean>

	    <bean id="smsMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	     <property name="mapperInterface" value="com.ailk.ctc.rtbmsys.mapper.sms.SmsMapper"/>
	     <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	    </bean>
 
	    <!-- 设置MyBatis 扫描映射文件的根目录信息,这样就可不指定特定mapper，
	                      而使用自动扫描包的方式来注册各种Mapper
	    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	        <property name="basePackage" value="com.ailk.ctc.rtbmsys.mapper" />
	    </bean>
	    -->
    <!-- ********************************************************** -->
   
</beans>