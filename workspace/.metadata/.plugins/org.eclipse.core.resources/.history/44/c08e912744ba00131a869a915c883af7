/**
 * copyright (a) 2010-2014 tomstools.org. All rights reserved.
 */
package org.tomstools.common.concurrent.masterWorker;

import java.lang.Thread.State;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * master-worker模式中的master
 * @author admin
 * @date 2014年4月1日 
 * @time 下午10:59:39
 * @version 1.0
 */
public class Master<TASK,OUT> implements Iterable<OUT> {
    // 任务队列
    private Queue<TASK> taskQueue = new ConcurrentLinkedQueue<TASK>();
    // 进行队列
    private List<Thread> threads = new ArrayList<Thread>();
    // 处理结果
    private Map<String,OUT> resultMap = new ConcurrentHashMap<String, OUT>();
    
    /**
     * 构造函数
     * @param worker    业务处理器原型
     * @param workerCount 业务处理器个数
     * @since 1.0
     */
    public Master(Worker<TASK, OUT> worker, int workerCount){
        worker.setResultMap(resultMap);
        worker.setTaskQueue(taskQueue);
        // 生成业务处理器
        for (int i = 0; i < workerCount; i++) {
            threads.add(new Thread(worker, Integer.toString(i)));
        }
    }
    
    /**
     * 开始执行任务
     * 
     * @since 1.0
     */
    public void execute(){
        for (Thread thread : threads) {
            thread.start();
        }
    }
    
    /**
     * 提交一个待处理的对象 
     * @param task 待处理的对象
     * @since 1.0
     */
    public void submit(TASK task){
        taskQueue.add(task);
    }
    
    /**
     * 判断是否已经处理完毕
     * @return true 已经全部处理完毕；false 没有全部处理完毕
     * @since 1.0
     */
    public boolean isComplete(){
        for (Thread thread : threads) {
            if (thread.getState() != State.TERMINATED){
                // 还未结束
                return false;
            }
        }
        
        return true;
    }

    public Iterator<OUT> iterator() {
        return new ResultIterator<OUT>(this);
    }
    
    /**
     * master-worker模式的结果收集器
     * @author admin
     * @date 2014年4月2日 
     * @time 下午2:17:15
     * @version 1.0
     */
    public static class ResultIterator<OUT> implements Iterator<OUT> {
        private Master<?, OUT> master;
        private Map<String, OUT> resultData;
        private OUT value;

        public ResultIterator(Master<?, OUT> master) {
            this.master = master;
            resultData = master.getResult();
        }

        public boolean hasNext() {
            value = null;
            while (!resultData.isEmpty() || !master.isComplete()) {
                // 收集结果，并在收集之后删除
                Set<String> keys = resultData.keySet();
                String key = null;
                for (String k : keys) {
                    // 一次只处理一条
                    key = k;
                    break;
                }
                if (null != key) {
                    value = resultData.remove(key);
                    break;
                }
            }
            
            return null != value;
        }

        public void remove() {
            // do nonthing
        }

        public OUT next() {
            return value;
        }
    }
}
