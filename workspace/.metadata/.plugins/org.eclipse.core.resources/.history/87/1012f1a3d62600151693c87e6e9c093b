/**
 * copyright (a) 2010-2015 tomstools.org. All rights reserved.
 */
package com.asiainfo.ods.omp.web.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.alibaba.fastjson.JSON;
import com.asiainfo.ods.omp.web.model.Menu;
import com.asiainfo.ods.omp.web.model.Page;
import com.asiainfo.ods.omp.web.model.User;
import com.asiainfo.ods.omp.web.service.CodeService;
import com.asiainfo.ods.omp.web.service.UserService;

/**
 * 
 * @author admin
 * @date 2015年7月6日
 * @time 下午8:45:45
 * @version 1.0
 */
@Controller
public class MainControl {
    private static final Log LOG = LogFactory.getLog(MainControl.class);
    private static final String THEME_DEFAULT = "default";
    @Autowired
    private UserService userService;
    @Autowired
    private CodeService codeService;

    @RequestMapping("/login")
    public String login(
            @RequestParam(value = "key", required = false) final String key,
            @RequestParam(value = "userName", required = false) final String userName,
            @RequestParam(value = "userPassword", required = false) final String userPassword,
            @RequestParam(value = "verifyCode", required = false) String verifyCode,
            @RequestParam(value = "theme", required = false, defaultValue = THEME_DEFAULT) String theme,
            Model model, HttpSession session) {
        LOG.info(">login.theme:" + theme);
        if(null != key && !"".equals(key)){
            return index(key, theme, model);
        }
        model.addAttribute("theme", getTheme(theme));
        if (null == userName || null == userPassword) {
            // 没有指定用户名和密码，则不提示任何错误
        } else if ("".equals(userName) || "".equals(userPassword)) {
            model.addAttribute("error", "用户名或密码不能为空！");
        } else {
            // 先进行验证码校验
            String realCode = (String) session.getAttribute(CodeService.KEY_CODE);
            if (null == verifyCode || !verifyCode.equalsIgnoreCase(realCode)) {
                model.addAttribute("error", "验证码错误！");
            } else {
                User user = userService.getUser(userName, userPassword);
                if (null != user) { // 认证通过
                    List<Page> pages = userService.getUserPages(user.getUserId());
                    if (null == pages) {
                        pages = Collections.emptyList();
                    }
                    model.addAttribute("pages", JSON.toJSONString(pages));

                    List<Menu> menus = userService.getUserMenus(user.getUserId());
                    if (null == menus) {
                        menus = Collections.emptyList();
                    }
                    model.addAttribute("menus", JSON.toJSONString(menus));

                    model.addAttribute("user", user);
                    return "index";
                } else {
                    model.addAttribute("error", "用户名/密码错误");
                }
            }
        }
        return "login";
    }

    @RequestMapping("/index")
    public String index(@RequestParam(value = "key", defaultValue = "") String key,
            @RequestParam(value = "theme", defaultValue = THEME_DEFAULT) String theme, Model model) {
        if (null == key || "".equals(key)) {
            model.addAttribute("error", "请先登录！");
        } else {
            User user = userService.getUserByKey(key);
            if (null != user) {
                if ("".equals(user.getKey())) {
                    model.addAttribute("error", "密钥已失效！");
                } else {
                    List<Page> pages = userService.getUserPages(user.getUserId());
                    if (null == pages) {
                        pages = Collections.emptyList();
                    }
                    model.addAttribute("pages", JSON.toJSONString(pages));

                    List<Menu> menus = userService.getUserMenus(user.getUserId());
                    if (null == menus) {
                        menus = Collections.emptyList();
                    }
                    model.addAttribute("menus", JSON.toJSONString(menus));

                    model.addAttribute("user", user);
                    model.addAttribute("theme", getTheme(theme));
                    return "index";
                }
            } else {
                model.addAttribute("error", "没有找到密钥对应的用户。密钥：" + key);
            }
        }
        return "login";
    }

    private String getTheme(String theme) {
        if (null == theme || "".equals(theme)) {
            return THEME_DEFAULT;
        }
        String[] themes = theme.split(",");
        for (int i = 0; i < themes.length; i++) {
            if (!"".equals(themes[i])) {
                return themes[i];
            }
        }
        return THEME_DEFAULT;
    }

    @RequestMapping("/main")
    public String main(@RequestParam(value = "key", defaultValue = "") String key,
            @RequestParam(value = "theme", defaultValue = THEME_DEFAULT) String theme,
            @RequestParam("pageId") int pageId, Model model) {
        if (null == key || "".equals(key)) {
            model.addAttribute("error", "密钥不能为空！");
        } else {
            User user = userService.getUserByKey(key);
            if (null != user) {
                List<Page> pages = userService.getUserPages(user.getUserId());
                List<Page> subPages = null;
                Page page = null;
                if (null == pages) {
                    subPages = Collections.emptyList();
                } else {
                    subPages = new ArrayList<Page>();
                    for (Page aPage : pages) {
                        if (pageId == aPage.getParentId()) {
                            subPages.add(aPage);
                        } else if (pageId == aPage.getPageId()) {
                            page = aPage;
                        }
                    }
                }
                model.addAttribute("subPages", JSON.toJSONString(subPages));

                model.addAttribute("page", page);
                model.addAttribute("user", user);
                model.addAttribute("theme", getTheme(theme));
                return "main";
            } else {
                model.addAttribute("error", "没有找到密钥对应的用户。密钥：" + key);
            }
        }
        return "login";
    }
}
